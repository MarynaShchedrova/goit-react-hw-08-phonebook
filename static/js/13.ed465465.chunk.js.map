{"version":3,"file":"static/js/13.ed465465.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs","../node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs","../node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs","../node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formName\":\"ContactForm_formName__9bHzl\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { toast } from 'react-hot-toast';\nimport css from './ContactForm.module.css';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { Button, Heading, Text } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (name && phone) {\n      if (contacts.find(el => el.name === name)) {\n        return toast.error(`${name} is already in contacts`);\n      }\n      dispatch(addContact({ name, phone }));\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <Heading as=\"h1\">Phonebook</Heading>\n      <Text fontSize=\"xl\">Name</Text>\n      <input\n        className={css.formName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Text fontSize=\"xl\">Phone</Text>\n      <input\n        className={css.formName}\n        type=\"tel\"\n        name=\"number\"\n        value={phone}\n        onChange={handleChange}\n        placeholder=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <Button className={css.formBtn} type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  Grid\n} from \"./chunk-5FO2ZLZM.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n","// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n","import {\n  CardStylesProvider\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactListItemBtn\":\"ContactList_contactListItemBtn__TXYnT\"};","import { loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport {\n  getContacts,\n  getError,\n  getFilter,\n  getIsLoading,\n} from 'redux/contacts/selectors';\nimport { Button, Card, CardBody, SimpleGrid, Text } from '@chakra-ui/react';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {isLoading && !error && loader}\n      <SimpleGrid\n        spacing={4}\n        templateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n      >\n        {filteredContacts.map(({ name, number, id }) => (\n          <li key={id}>\n            <Card>\n              <CardBody>\n                <Text fontSize=\"lg\">\n                  <strong>&#8226;</strong>\n                  {name}: {number}\n                </Text>\n                <Button\n                  class={css.contactListItemBtn}\n                  size=\"xs\"\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </Button>\n              </CardBody>\n            </Card>\n          </li>\n        ))}\n      </SimpleGrid>\n    </>\n  );\n};\n","import { Heading, Input } from '@chakra-ui/react';\nimport styled from '@emotion/styled';\n\nexport const StyledHeading = styled(Heading)`\n    margin-top: 10px;\n`;\n\nexport const StyledInput = styled(Input)`\n    margin-bottom: 10px;\n`;","import { Text } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { StyledHeading, StyledInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <StyledHeading as=\"h2\">Contacts</StyledHeading>\n      <Text fontSize=\"xl\">Find contacts by name:</Text>\n      <StyledInput\n        size=\"sm\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={filter.filter}\n        onChange={onFilter}\n        required\n      />\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { loader } from 'components/Loader/Loader';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nexport default function Contacts() {\n  const isLoading = useSelector(getIsLoading);\n\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <ContactForm />\n        <Filter />\n        <div>{isLoading && loader}</div>\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","Heading","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css","displayName","Text","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","ContactForm","dispatch","useDispatch","useState","name","setName","phone","setNumber","useSelector","handleChange","event","currentTarget","value","onSubmit","preventDefault","find","el","toast","addContact","css","as","fontSize","type","onChange","placeholder","pattern","title","required","Grid","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","createStylesContext","CardStylesProvider","useCardStyles","Card","children","direction","justify","useMultiStyleConfig","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardBody","body","ContactList","useEffect","fetchContacts","filteredContacts","contact","toLowerCase","includes","loader","number","id","class","size","onClick","deleteContact","StyledHeading","styled","StyledInput","Input","Filter","setFilter","target","Contacts"],"sourceRoot":""}